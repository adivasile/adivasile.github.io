<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="https://adrianvasile.dev/feed.xml" rel="self" type="application/atom+xml" /><link href="https://adrianvasile.dev/" rel="alternate" type="text/html" /><updated>2023-01-12T14:56:39+02:00</updated><id>https://adrianvasile.dev/feed.xml</id><title type="html">Adrian Vasile</title><subtitle></subtitle><entry><title type="html">Managing dotfiles with Chezmoi</title><link href="https://adrianvasile.dev/2023/01/12/dotfiles-using-chezmoi.html" rel="alternate" type="text/html" title="Managing dotfiles with Chezmoi" /><published>2023-01-12T12:59:10+02:00</published><updated>2023-01-12T12:59:10+02:00</updated><id>https://adrianvasile.dev/2023/01/12/dotfiles-using-chezmoi</id><content type="html" xml:base="https://adrianvasile.dev/2023/01/12/dotfiles-using-chezmoi.html"><![CDATA[<h1 id="intro">Intro</h1>

<p>If you’re a developer on a Unix-like system you probably have a lot of dotfiles in your <code class="language-plaintext highlighter-rouge">$HOME</code> folder. Files like <code class="language-plaintext highlighter-rouge">.bashrc</code>, <code class="language-plaintext highlighter-rouge">.zshrc</code> and others. Most people will probably have had their first encounter with <code class="language-plaintext highlighter-rouge">.bashrc</code> when they needed to add something to their <code class="language-plaintext highlighter-rouge">$PATH</code>. These files are used to configure various parts of your system including any software you use during development.</p>

<p>It is my belief that by starting to pay attention to them and being aware of their structure and what you add to them you’ll gain a lot of knowledge about how your system works. This will make it easier to customize your development experience, fix any issues that you may encounter and also replicate the experience on another machine.</p>

<p>I think the first step on that journey starts with proper dotfile management. There’s a bunch of tools out there that do that, you can check out <a href="https://dotfiles.github.io/utilities/">this list</a>. I’m using <a href="https://www.chezmoi.io/">chezmoi</a> and it’s what I’ll be focusing on in this guide.</p>

<h1 id="why-use-chezmoi">Why use Chezmoi?</h1>

<p>When I first started managing my dotfiles I came across <a href="https://github.com/holman/dotfiles">holman does dotfiles</a> which introduced to me to 2 very interesting concepts: splitting by topics and using symlinks.</p>

<h2 id="topics">Topics</h2>
<p>The first concept I learned was separating configurations per topic. So instead of having one big <code class="language-plaintext highlighter-rouge">.zshrc</code> where I defined environment variables for everything I used, I could break these up in smaller files. So I had a <code class="language-plaintext highlighter-rouge">java</code> folder where I had config files for everything related to <code class="language-plaintext highlighter-rouge">java</code>, one for <code class="language-plaintext highlighter-rouge">ruby</code> and so on. Then <code class="language-plaintext highlighter-rouge">.zshrc</code> would just need to source all those topic files based on some convention. You can take this one step further and have multiple files within each topic: one for adding to <code class="language-plaintext highlighter-rouge">$PATH</code>, one for defining environment variables and so on.</p>

<h2 id="symlinks">Symlinks</h2>
<p>Next was putting all dotfiles in a folder and then using a script to automatically symlink everything into my <code class="language-plaintext highlighter-rouge">$HOME</code> directory. In hindsight, this seems like something very obvious but somehow it didn’t cross my mind until that point. This worked great back then because I was only using <code class="language-plaintext highlighter-rouge">.zshrc</code> and <code class="language-plaintext highlighter-rouge">.vimrc</code> and both of them needed to be symlinked into the same directory. Later, when I switched to <a href="https://neovim.io/">neovim</a> I found that its config file had to be under <code class="language-plaintext highlighter-rouge">~/.config/nvim/init.vim</code> and this broke the convention that I was using. Not a big issue I thought, I’ll just symlink this one file manually. But as I moved to a more command line focused workflow and I added more tools I found that this wasn’t scaling very well.</p>

<p>So it became clear I needed something else, which is how I ended up finding <a href="https://www.chezmoi.io/">chezmoi</a>.</p>

<p>Beside being able to handle files regardless of where they are located in your home directory, it offers a couple other features that I think are very powerful: templating based on your current machine and hooks that allow you to execute something after updating configs</p>

<h1 id="guide">Guide</h1>

<h2 id="installation">Installation</h2>

<p>Installation is pretty straightforward and detailed instructions are available <a href="https://www.chezmoi.io/install/">here</a>. A simple one-liner command is this:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>sh <span class="nt">-c</span> <span class="s2">"</span><span class="si">$(</span>curl <span class="nt">-fsLS</span> get.chezmoi.io<span class="si">)</span><span class="s2">"</span></code></pre></figure>

<h2 id="initialize-dotfile-repository">Initialize dotfile repository</h2>

<p>You need to run this in your command line</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>chezmoi init</code></pre></figure>

<p>It will create a new directory here: <code class="language-plaintext highlighter-rouge">.local/share/chezmoi</code>. If you don’t want to type that path every time, there is a helper command, <code class="language-plaintext highlighter-rouge">chezmoi cd</code> that will take there.</p>

<h2 id="add-your-first-dotfile">Add your first dotfile</h2>

<p>Let’s add <code class="language-plaintext highlighter-rouge">.zshrc</code> to the repository. Run this:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>chezmoi add ~/.zshrc</code></pre></figure>

<p>This will create a copy of <code class="language-plaintext highlighter-rouge">.zshrc</code> and add it to <code class="language-plaintext highlighter-rouge">.local/share/chezmoi</code>. If you run <code class="language-plaintext highlighter-rouge">chezmoi cd</code> now, you should see a file named <code class="language-plaintext highlighter-rouge">dot_zshrc</code> with the same contents as the original <code class="language-plaintext highlighter-rouge">.zshrc</code></p>

<p>At this point it may be a good ideea to start tracking changes in this folder with a git repository.</p>

<h2 id="the-workflow">The workflow</h2>

<p>You’ve added your first file, now it’s time to look at how you would use this day to day. An important thing to note is that you never want to edit the original files, but always edit only those managed by <strong>chezmoi</strong>.</p>

<p>Go ahead and make a change in <code class="language-plaintext highlighter-rouge">.local/share/chezmoi/dot_zshrc</code> and then run</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>chezmoi diff</code></pre></figure>

<p>You should now see something similar to a git diff, showing you all the changes you’ve made in the chezmoi folder. If you’re happy with those changes just run:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>chezmoi apply</code></pre></figure>

<p>This will replace the contents of <code class="language-plaintext highlighter-rouge">~/.zshrc</code> with what’s defined in <code class="language-plaintext highlighter-rouge">.local/share/chezmoi/dot_zshrc</code></p>

<p>So the basic workflow will be:</p>
<ol>
  <li>Edit source files in your chezmoi folder</li>
  <li>Run <code class="language-plaintext highlighter-rouge">chezmoi diff</code> to check the diff</li>
  <li>Run <code class="language-plaintext highlighter-rouge">chezmoi apply</code> to apply the changes to the destination files</li>
</ol>

<h2 id="moving-to-a-different-machine">Moving to a different machine</h2>

<p>When you want to port your dotfiles to another machine you just need to initialize chezmoi with the url of the repo you created earlier</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>chezmoi init &lt;url-of-repo&gt;</code></pre></figure>

<p>Now the repository will be cloned unde <code class="language-plaintext highlighter-rouge">.local/share/chezmoi/</code>. After that you just use the regular workflow from before. Check the changes with <code class="language-plaintext highlighter-rouge">chezmoi diff</code> and apply them with <code class="language-plaintext highlighter-rouge">chezmoi apply</code></p>

<h2 id="using-templates">Using templates</h2>

<p>So now you’ve setup everything, you got stuff working on both machines, but you soon find yourself wanting to configure the same thing with different values based on the OS. One thing you could do is a conditional based on the output of <code class="language-plaintext highlighter-rouge">uname -r</code>. That’ll do the job, but it can be a bit clunky. Chezmoi solves this with templates.</p>

<p>In my case, I wanted different font sizes in my <a href="https://github.com/alacritty/alacritty">alacritty</a> terminal window based on the machine I was using.</p>

<p>First thing you want to do is rename the config file and add a <code class="language-plaintext highlighter-rouge">.tmpl</code> extension. So <code class="language-plaintext highlighter-rouge">dot_zshrc</code> becomes <code class="language-plaintext highlighter-rouge">dot_zshrc.tmpl</code>. Then you can use the template syntax in that file and chezmoi will interpret it whenever you apply your changes.</p>

<p>In my case this is what I ended up having in my alacritty config</p>

<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="pi">{{</span> <span class="nv">if eq .chezmoi.os "darwin"</span> <span class="pi">}}</span>

  <span class="na">font</span><span class="pi">:</span>
    <span class="na">size</span><span class="pi">:</span> <span class="m">11</span>

<span class="pi">{{</span> <span class="nv">else if eq .chezmoi.os "linux"</span> <span class="pi">}}</span>

  <span class="na">font</span><span class="pi">:</span>
    <span class="na">size</span><span class="pi">:</span> <span class="s">9</span></code></pre></figure>

<p>To see all the data points chezmoi knows about, you can run:</p>

<figure class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span>chezmoi data</code></pre></figure>

<p>This will output a hash with all the info chezmoi has about your system</p>

<p>For more info check out the <a href="https://www.chezmoi.io/user-guide/templating/">official documentation</a></p>

<h2 id="using-hooks">Using hooks</h2>

<p>One thing I wanted to do was reload my ZSH config whenever I would apply changes with chezmoi. You can do that with scripts in your dotfile repository. Their names have to start with <code class="language-plaintext highlighter-rouge">run_</code>. After that you can add <code class="language-plaintext highlighter-rouge">before_</code> or <code class="language-plaintext highlighter-rouge">after_</code> to indicate if they should run before changes are applied or after. So you’d have something like <code class="language-plaintext highlighter-rouge">run_after_*.sh</code>.</p>

<p>In my case I have a <code class="language-plaintext highlighter-rouge">run_after_reload.sh</code> script that just reloads my ZSH config</p>

<figure class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="c"># run_after_reload.rh</span>
<span class="c">#!/bin/zsh</span>
<span class="nb">.</span> ~/.zshrc</code></pre></figure>

<p>There’s a bunch more options available, just check out the <a href="https://www.chezmoi.io/user-guide/use-scripts-to-perform-actions/">official documentation</a></p>

<h1 id="outro">Outro</h1>

<p>I hope this was a useful entry about why and how you should start managing your dotfiles.</p>

<p>Cheers.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Intro]]></summary></entry></feed>